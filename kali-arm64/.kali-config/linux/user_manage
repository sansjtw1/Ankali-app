#!/bin/bash
# Copyright (c) 2024 Ankali SansJtw
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# Email: sansjtw@163.com, sansjtw1@gmail.com

# 配置文件路径
CONFIG_FILE="/.kali-config/Ankali.yaml"

# 日志文件路径
LOG_DIR="/.kali-config/log"
LOG_FILE="$LOG_DIR/$(date +'%Y-%m-%d').log"

# 定义颜色
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# 创建日志文件目录
mkdir -p "$LOG_DIR"

# 日志记录函数
log() {
    echo -e "$1" >> "$LOG_FILE"
    echo -e "$2"
}

# 确保配置文件存在
if [ ! -f "$CONFIG_FILE" ]; then
    log "Configuration file does not exist: $CONFIG_FILE" "${RED}[-] Configuration file does not exist: $CONFIG_FILE${NC}"
    exit 1
fi

# 读取配置文件的值
get_config_value() {
    local key=$1
    grep "^$key:" "$CONFIG_FILE" | cut -d ' ' -f 2-
}

# 获取LIUNXUSER配置
LIUNXUSER=$(get_config_value "LIUNXUSER")

# 保存配置文件的值
save_config() {
    sed -i "s/^LIUNXUSER:.*/LIUNXUSER: $1/" "$CONFIG_FILE"
    if ! grep -q "^LIUNXUSER:" "$CONFIG_FILE"; then
        echo "LIUNXUSER: $1" >> "$CONFIG_FILE"
    fi
}

# 获取当前的可用用户名
get_linux_users() {
    awk -F':' '$7 !~ /nologin|false/ {print $1}' /etc/passwd
}

# 中文主菜单
main_cn(){
main_menu() {
    echo -e "\033[1;33m"
    headers="所有Linux用户,当前Linux用户"
    rows=(
    "$(awk -F':' '$7 !~ /nologin|false/ {print $1}' /etc/passwd),$LIUNXUSER"
    )
    python3 /.kali-config/linux/table_gen.py "$headers" "${rows[@]}"
    echo -e "\033[0m"
    echo -e "${YELLOW}Liunx用户管理设置${NC}"
    echo "[1] 登录Liunx用户"
    echo "[2] 新建Liunx用户"
    echo "[3] 移除Liunx用户"
    echo "[0] 退出"
    echo -n "请选择: "
    read choice
    case $choice in
        1) login_user ;;
        2) add_user ;;
        3) remove_user ;;
        0) exit 0 ;;
        *) log "Invalid choice: $choice" "${RED}[-] 无效的选择，请重新输入${NC}" && main_menu ;;
    esac
}

# 登录用户
login_user() {
    local users=($(get_linux_users))
    if [ ${#users[@]} -eq 0 ]; then
        log "No users found" "${RED}[-] 没有找到任何用户${NC}"
        main_menu
    fi

    echo -e "${YELLOW}请选择需要登录或更换的用户名:${NC}"
    for i in "${!users[@]}"; do
        echo "[$((i+1))] ${users[i]}"
    done
    echo "[0] 返回"
    echo -n "请选择: "
    read choice

    if [[ $choice -ge 1 && $choice -le ${#users[@]} ]]; then
        local selected_user=${users[$((choice-1))]}
        save_config "$selected_user"
        log "User switched to: $selected_user" "${GREEN}[+] 已切换到用户: $selected_user${NC}"
        main_menu
    elif [ "$choice" == "0" ]; then
        main_menu
    else
        log "Invalid choice for login: $choice" "${RED}[-] 无效的选择，请重新输入${NC}"
        login_user
    fi
}

# 新建用户
add_user() {
    echo -n "请输入新的用户名: "
    read new_user
    if [ -z "$new_user" ]; then
        log "No username provided" "${RED}[-] 未输入用户名，请重新输入${NC}"
        main_menu
    else
        sudo useradd "$new_user" 2>>"$LOG_FILE"
        if [ $? -eq 0 ]; then
            log "User created: $new_user" "${GREEN}[+] 用户已创建: $new_user${NC}"
            mkdir "/home/$new_user"
        else
            log "Error creating user: $new_user" "${RED}[-] 创建用户失败，请检查日志文件${NC}"
        fi
        main_menu
    fi
}

# 移除用户
remove_user() {
    local users=($(get_linux_users))
    if [ ${#users[@]} -eq 0 ]; then
        log "No users found" "${RED}[-] 没有找到任何用户${NC}"
        main_menu
    fi

    echo -e "${YELLOW}请选择需要移除的用户:${NC}"
    for i in "${!users[@]}"; do
        echo "[$((i+1))] ${users[i]}"
    done
    echo "[0] 返回"
    echo -n "请选择: "
    read choice

    if [[ $choice -ge 1 && $choice -le ${#users[@]} ]]; then
        local selected_user=${users[$((choice-1))]}
        sudo userdel "$selected_user" 2>>"$LOG_FILE"
        if [ $? -eq 0 ]; then
            log "User removed: $selected_user" "${GREEN}[+] 用户已移除: $selected_user${NC}"
            save_config "root"
        else
            log "Error removing user: $selected_user" "${RED}[-] 移除用户失败，请检查日志文件\n当然，这是一个常见的问题\n为什么会导致？\n这可能是因为该用户有进程或会话\n可尝试的解决方法:\n复制信息反馈至issues\n重启Ankali重试${NC}"
        fi
        main_menu
    elif [ "$choice" == "0" ]; then
        main_menu
    else
        log "Invalid choice for removal: $choice" "${RED}[-] 无效的选择，请重新输入${NC}"
        remove_user
    fi
}

# 运行主菜单
main_menu
}

# English Main menu
main_en(){
main_menu() {
    echo -e "\033[1;33m"
    headers="All Linux Users,Current Linux User"
    rows=(
    "$(awk -F':' '$7 !~ /nologin|false/ {print $1}' /etc/passwd),$LIUNXUSER"
    )
    python3 /.kali-config/linux/table_gen.py "$headers" "${rows[@]}"
    echo -e "\033[0m"
     echo -e "${YELLOW}Linux User Management Settings${NC}"
     echo "[1] Login to Linux user"
     echo "[2] Create new Linux user"
     echo "[3] Remove Linux user"
     echo "[0] Exit"
     echo -n "Please choose: "
     read choice
     case $choice in
         1) login_user ;;
         2) add_user ;;
         3) remove_user ;;
         0) exit 0 ;;
         *) log "Invalid choice: $choice" "${RED}[-] Invalid choice, please try again${NC}" && main_menu ;;
     esac
}

# Login user
login_user() {
     local users=($(get_linux_users))
     if [ ${#users[@]} -eq 0 ]; then
         log "No users found" "${RED}[-] No users found${NC}"
         main_menu
     fi

     echo -e "${YELLOW}Please choose the username to login or switch to:${NC}"
     for i in "${!users[@]}"; do
         echo "[$((i+1))] ${users[i]}"
     done
     echo "[0] Return"
     echo -n "Please choose: "
     read choice

     if [[ $choice -ge 1 && $choice -le ${#users[@]} ]]; then
         local selected_user=${users[$((choice-1))]}
         save_config "$selected_user"
         log "User switched to: $selected_user" "${GREEN}[+] User switched to: $selected_user${NC}"
         main_menu
     elif [ "$choice" == "0" ]; then
         main_menu
     else
         log "Invalid choice for login: $choice" "${RED}[-] Invalid choice, please try again${NC}"
         login_user
     fi
}

# Add user
add_user() {
     echo -n "Enter new username: "
     read new_user
     if [ -z "$new_user" ]; then
         log "No username provided" "${RED}[-] No username provided, please try again${NC}"
         main_menu
     else
         sudo useradd "$new_user" 2>>"$LOG_FILE"
         if [ $? -eq 0 ]; then
             log "User created: $new_user" "${GREEN}[+] User created: $new_user${NC}"
             mkdir "/home/$new_user"
         else
             log "Error creating user: $new_user" "${RED}[-] Error creating user, please check the log file${NC}"
         fi
         main_menu
     fi
}

# Remove user
remove_user() {
     local users=($(get_linux_users))
     if [ ${#users[@]} -eq 0 ]; then
         log "No users found" "${RED}[-] No users found${NC}"
         main_menu
     fi

     echo -e "${YELLOW}Please choose the user to remove:${NC}"
     for i in "${!users[@]}"; do
         echo "[$((i+1))] ${users[i]}"
     done
     echo "[0] Return"
     echo -n "Please choose: "
     read choice

     if [[ $choice -ge 1 && $choice -le ${#users[@]} ]]; then
         local selected_user=${users[$((choice-1))]}
         sudo userdel "$selected_user" 2>>"$LOG_FILE"
         if [ $? -eq 0 ]; then
             log "User removed: $selected_user" "${GREEN}[+] User removed: $selected_user${NC}"
             save_config "root"
         else
             log "Error removing user: $selected_user" "${RED}[-] Failed to remove user, please check the log file\nThis is a common issue\nWhy does this happen?\nIt might be because the user has active processes or sessions\nPossible solutions:\nCopy the information feedback to issues\nRestart Ankali and try again${NC}"
         fi
         main_menu
     elif [ "$choice" == "0" ]; then
         main_menu
     else
         log "Invalid choice for removal: $choice" "${RED}[-] Invalid choice, please try again${NC}"
         remove_user
     fi
}

# Run main menu
main_menu
}

# Judging Chinese or English
CONFIG_FILE="/.kali-config/Ankali.yaml"
# 确保配置文件存在
if [ ! -f "$CONFIG_FILE" ]; then
    echo -e "${RED}[-] Configuration file does not exist：$CONFIG_FILE ${NC}"
    exit 1
fi

# 读取配置文件中的值，忽略注释行
get_config_value() {
    local key=$1
    grep "^$key:" "$CONFIG_FILE" | cut -d ' ' -f 2-
}
LANGUAGE=$(get_config_value "LANGUAGE")
if [ "$LANGUAGE" = "CN" ]; then
    main_cn
elif [ "$LANGUAGE" = "EN" ]; then
    main_en
else
    main_en
fi